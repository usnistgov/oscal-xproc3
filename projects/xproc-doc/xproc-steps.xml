<?xml version="1.0" encoding="UTF-8"?>
<library>
   <declare-step library="standard"
                 type="p:add-attribute">
      <input port="source"
             content-types="xml html"/>
      <output port="result"
              content-types="xml html"/>
      <option name="match"
              as="xs:string"
              select="'/*'"
              e:type="XSLTSelectionPattern"
              xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"/>
      <option name="attribute-name"
              required="true"
              as="xs:QName"/>
      <option name="attribute-value"
              required="true"
              as="xs:string"/>
   </declare-step>
   <declare-step library="standard"
                 type="p:add-xml-base">
      <input port="source"
             content-types="xml html"/>
      <output port="result"
              content-types="xml html"/>
      <option name="all"
              as="xs:boolean"
              select="false()"/>
      <option name="relative"
              as="xs:boolean"
              select="true()"/>
   </declare-step>
   <declare-step library="standard"
                 type="p:archive">
      <input port="source"
             primary="true"
             content-types="any"
             sequence="true"/>
      <input port="manifest"
             content-types="xml"
             sequence="true">
         <empty/>
      </input>
      <input port="archive"
             content-types="any"
             sequence="true">
         <empty/>
      </input>
      <output port="result"
              primary="true"
              content-types="any"
              sequence="false"/>
      <output port="report"
              content-types="application/xml"
              sequence="false"/>
      <option name="format"
              as="xs:QName"
              select="'zip'"/>
      <option name="relative-to"
              as="xs:anyURI?"/>
      <option name="parameters"
              as="map(xs:QName, item()*)?"/>
   </declare-step>
   <declare-step library="standard"
                 type="p:archive-manifest">
      <input port="source"
             primary="true"
             content-types="any"
             sequence="false"/>
      <output port="result"
              primary="true"
              content-types="application/xml"
              sequence="false"/>
      <option name="format"
              as="xs:QName?"/>
      <option name="parameters"
              as="map(xs:QName, item()*)?"/>
      <option name="relative-to"
              as="xs:anyURI?"/>
      <option name="override-content-types"
              as="array(array(xs:string))?"/>
   </declare-step>
   <declare-step library="standard"
                 type="p:cast-content-type">
      <input port="source"
             content-types="any"/>
      <output port="result"
              content-types="any"/>
      <option name="content-type"
              required="true"
              as="xs:string"/>
      <option name="parameters"
              as="map(xs:QName,item()*)?"/>
   </declare-step>
   <declare-step library="standard"
                 type="p:compare">
      <input port="source"
             primary="true"
             content-types="any"/>
      <input port="alternate"
             content-types="any"/>
      <output port="result"
              primary="true"
              content-types="application/xml"/>
      <output port="differences"
              content-types="any"
              sequence="true"/>
      <option name="parameters"
              as="map(xs:QName,item()*)?"/>
      <option name="method"
              as="xs:QName?"/>
      <option name="fail-if-not-equal"
              as="xs:boolean"
              select="false()"/>
   </declare-step>
   <declare-step library="standard"
                 type="p:compress">
      <input port="source"
             primary="true"
             content-types="any"
             sequence="false"/>
      <output port="result"
              primary="true"
              content-types="any"
              sequence="false"/>
      <option name="format"
              as="xs:QName"
              select="'gzip'"/>
      <option name="serialization"
              as="map(xs:QName,item()*)?"/>
      <option name="parameters"
              as="map(xs:QName, item()*)?"/>
   </declare-step>
   <declare-step library="standard"
                 type="p:count">
      <input port="source"
             content-types="any"
             sequence="true"/>
      <output port="result"
              content-types="application/xml"/>
      <option name="limit"
              as="xs:integer"
              select="0"/>
   </declare-step>
   <declare-step library="standard"
                 type="p:delete">
      <input port="source"
             content-types="xml html"/>
      <output port="result"
              content-types="text xml html"/>
      <option name="match"
              required="true"
              as="xs:string"
              e:type="XSLTSelectionPattern"
              xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"/>
   </declare-step>
   <declare-step library="standard"
                 type="p:error">
      <input port="source"
             sequence="true"
             content-types="text xml"/>
      <output port="result"
              sequence="true"
              content-types="any"/>
      <option name="code"
              required="true"
              as="xs:QName"/>
   </declare-step>
   <declare-step library="standard"
                 type="p:filter">
      <input port="source"
             content-types="xml html"/>
      <output port="result"
              sequence="true"
              content-types="text xml html"/>
      <option name="select"
              required="true"
              as="xs:string"
              e:type="XPathExpression"
              xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"/>
   </declare-step>
   <declare-step library="standard"
                 type="p:hash">
      <input port="source"
             primary="true"
             content-types="xml html"/>
      <output port="result"
              content-types="text xml html"/>
      <option name="parameters"
              as="map(xs:QName,item()*)?"/>
      <option name="value"
              required="true"
              as="xs:string"/>
      <option name="algorithm"
              required="true"
              as="xs:QName"/>
      <option name="match"
              as="xs:string"
              select="'/*/node()'"
              e:type="XSLTSelectionPattern"
              xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"/>
      <option name="version"
              as="xs:string?"/>
   </declare-step>
   <declare-step library="standard"
                 type="p:http-request">
      <input port="source"
             content-types="any"
             sequence="true"/>
      <output port="result"
              primary="true"
              content-types="any"
              sequence="true"/>
      <output port="report"
              content-types="application/json"/>
      <option name="href"
              as="xs:anyURI"
              required="true"/>
      <option name="method"
              as="xs:string?"
              select="'GET'"/>
      <option name="serialization"
              as="map(xs:QName,item()*)?"/>
      <option name="headers"
              as="map(xs:string, xs:string)?"/>
      <option name="auth"
              as="map(xs:string, item()+)?"/>
      <option name="parameters"
              as="map(xs:QName, item()*)?"/>
      <option name="assert"
              as="xs:string"
              select="'.?status-code lt 400'"/>
   </declare-step>
   <declare-step library="standard"
                 type="p:identity">
      <input port="source"
             sequence="true"
             content-types="any"/>
      <output port="result"
              sequence="true"
              content-types="any"/>
   </declare-step>
   <declare-step library="standard"
                 type="p:insert">
      <input port="source"
             primary="true"
             content-types="xml html"/>
      <input port="insertion"
             sequence="true"
             content-types="xml html text"/>
      <output port="result"
              content-types="xml html text"/>
      <option name="match"
              as="xs:string"
              select="'/*'"
              e:type="XSLTSelectionPattern"
              xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"/>
      <option name="position"
              values="('first-child','last-child','before','after')"
              select="'after'"/>
   </declare-step>
   <declare-step library="standard"
                 type="p:json-join">
      <input port="source"
             sequence="true"
             content-types="any">
      </input>
      <output port="result"
              content-types="application/json"/>
      <option name="flatten-to-depth"
              as="xs:string?"
              select="'0'"/>
   </declare-step>
   <declare-step library="standard"
                 type="p:json-merge">
      <input port="source"
             sequence="true"
             content-types="any">
      </input>
      <output port="result"
              content-types="application/json"/>
      <option name="duplicates"
              values="('reject', 'use-first', 'use-last', 'use-any', 'combine')"
              select="'use-first'"/>
      <option name="key"
              as="xs:string"
              select="'concat(&#34;_&#34;,$p:index)'"
              e:type="XPathExpression"
              xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"/>
   </declare-step>
   <declare-step library="standard"
                 type="p:label-elements">
      <input port="source"
             content-types="xml html"/>
      <output port="result"
              content-types="xml html"/>
      <option name="attribute"
              as="xs:QName"
              select="'xml:id'"/>
      <option name="label"
              as="xs:string"
              select="'concat(&#34;_&#34;,$p:index)'"
              e:type="XPathExpression"
              xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"/>
      <option name="match"
              as="xs:string"
              select="'*'"
              e:type="XSLTSelectionPattern"
              xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"/>
      <option name="replace"
              as="xs:boolean"
              select="true()"/>
   </declare-step>
   <declare-step library="standard"
                 type="p:load">
      <output port="result"
              content-types="any"/>
      <option name="href"
              required="true"
              as="xs:anyURI"/>
      <option name="parameters"
              as="map(xs:QName,item()*)?"/>
      <option name="content-type"
              as="xs:string?"/>
      <option name="document-properties"
              as="map(xs:QName, item()*)?"/>
   </declare-step>
   <declare-step library="standard"
                 type="p:make-absolute-uris">
      <input port="source"
             content-types="xml html"/>
      <output port="result"
              content-types="xml html"/>
      <option name="match"
              required="true"
              as="xs:string"
              e:type="XSLTSelectionPattern"
              xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"/>
      <option name="base-uri"
              as="xs:anyURI?"/>
   </declare-step>
   <declare-step library="standard"
                 type="p:namespace-delete">
      <input port="source"
             content-types="xml html"/>
      <output port="result"
              content-types="xml html"/>
      <option name="prefixes"
              required="true"
              as="xs:string"/>
   </declare-step>
   <declare-step library="standard"
                 type="p:namespace-rename">
      <input port="source"
             content-types="xml html"/>
      <output port="result"
              content-types="xml html"/>
      <option name="from"
              as="xs:anyURI?"/>
      <option name="to"
              as="xs:anyURI?"/>
      <option name="apply-to"
              select="'all'"
              values="('all','elements','attributes')"/>
   </declare-step>
   <declare-step library="standard"
                 type="p:pack">
      <input port="source"
             content-types="text xml html"
             sequence="true"
             primary="true"/>
      <input port="alternate"
             sequence="true"
             content-types="text xml html"/>
      <output port="result"
              sequence="true"
              content-types="application/xml"/>
      <option name="wrapper"
              required="true"
              as="xs:QName"/>
   </declare-step>
   <declare-step library="standard"
                 type="p:rename">
      <input port="source"
             content-types="xml html"/>
      <output port="result"
              content-types="xml html"/>
      <option name="match"
              as="xs:string"
              select="'/*'"
              e:type="XSLTSelectionPattern"
              xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"/>
      <option name="new-name"
              required="true"
              as="xs:QName"/>
   </declare-step>
   <declare-step library="standard"
                 type="p:replace">
      <input port="source"
             primary="true"
             content-types="xml html"/>
      <input port="replacement"
             content-types="text xml html"/>
      <output port="result"
              content-types="text xml html"/>
      <option name="match"
              required="true"
              as="xs:string"
              e:type="XSLTSelectionPattern"
              xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"/>
   </declare-step>
   <declare-step library="standard"
                 type="p:set-attributes">
      <input port="source"
             primary="true"
             content-types="xml html"/>
      <output port="result"
              content-types="xml html"/>
      <option name="match"
              as="xs:string"
              select="'/*'"
              e:type="XSLTSelectionPattern"
              xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"/>
      <option name="attributes"
              required="true"
              as="map(xs:QName, xs:anyAtomicType)"/>
   </declare-step>
   <declare-step library="standard"
                 type="p:set-properties">
      <input port="source"
             content-types="any"/>
      <output port="result"
              content-types="any"/>
      <option name="properties"
              required="true"
              as="map(xs:QName,item()*)"/>
      <option name="merge"
              select="true()"
              as="xs:boolean"/>
   </declare-step>
   <declare-step library="standard"
                 type="p:sink">
      <input port="source"
             content-types="any"
             sequence="true"/>
   </declare-step>
   <declare-step library="standard"
                 type="p:sleep">
      <input port="source"
             sequence="true"
             content-types="any"/>
      <output port="result"
              sequence="true"
              content-types="any"/>
      <option name="duration"
              as="xs:nonNegativeInteger"
              required="true"/>
   </declare-step>
   <declare-step library="standard"
                 type="p:split-sequence">
      <input port="source"
             content-types="any"
             sequence="true"/>
      <output port="matched"
              sequence="true"
              primary="true"
              content-types="any"/>
      <output port="not-matched"
              sequence="true"
              content-types="any"/>
      <option name="initial-only"
              as="xs:boolean"
              select="false()"/>
      <option name="test"
              required="true"
              as="xs:string"
              e:type="XPathExpression"
              xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"/>
   </declare-step>
   <declare-step library="standard"
                 type="p:store">
      <input port="source"
             content-types="any"/>
      <output port="result"
              content-types="any"
              primary="true"/>
      <output port="result-uri"
              content-types="application/xml"/>
      <option name="href"
              required="true"
              as="xs:anyURI"/>
      <option name="serialization"
              as="map(xs:QName,item()*)?"/>
   </declare-step>
   <declare-step library="standard"
                 type="p:string-replace">
      <input port="source"
             content-types="xml html"/>
      <output port="result"
              content-types="text xml html"/>
      <option name="match"
              required="true"
              as="xs:string"
              e:type="XSLTSelectionPattern"
              xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"/>
      <option name="replace"
              required="true"
              as="xs:string"
              e:type="XPathExpression"
              xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"/>
   </declare-step>
   <declare-step library="standard"
                 type="p:text-count">
      <input port="source"
             primary="true"
             sequence="false"
             content-types="text"/>
      <output port="result"
              primary="true"
              sequence="false"
              content-types="application/xml"/>
   </declare-step>
   <declare-step library="standard"
                 type="p:text-head">
      <input port="source"
             primary="true"
             sequence="false"
             content-types="text"/>
      <output port="result"
              primary="true"
              sequence="false"
              content-types="text"/>
      <option name="count"
              required="true"
              as="xs:integer"/>
   </declare-step>
   <declare-step library="standard"
                 type="p:text-join">
      <input port="source"
             sequence="true"
             content-types="text"/>
      <output port="result"
              content-types="text"/>
      <option name="separator"
              as="xs:string?"/>
      <option name="prefix"
              as="xs:string?"/>
      <option name="suffix"
              as="xs:string?"/>
      <option name="override-content-type"
              as="xs:string?"/>
   </declare-step>
   <declare-step library="standard"
                 type="p:text-replace">
      <input port="source"
             primary="true"
             sequence="false"
             content-types="text"/>
      <output port="result"
              primary="true"
              sequence="false"
              content-types="text"/>
      <option name="pattern"
              required="true"
              as="xs:string"/>
      <option name="replacement"
              required="true"
              as="xs:string"/>
      <option name="flags"
              as="xs:string?"/>
   </declare-step>
   <declare-step library="standard"
                 type="p:text-sort">
      <input port="source"
             primary="true"
             sequence="false"
             content-types="text"/>
      <output port="result"
              primary="true"
              sequence="false"
              content-types="text"/>
      <option name="sort-key"
              as="xs:string"
              select="'.'"
              e:type="XPathExpression"
              xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"/>
      <option name="order"
              as="xs:string"
              select="'ascending'"
              values="('ascending', 'descending')"/>
      <option name="case-order"
              as="xs:string?"
              values="('upper-first', 'lower-first')"/>
      <option name="lang"
              as="xs:language?"/>
      <option name="collation"
              as="xs:string"
              select="'http://www.w3.org/2005/xpath-functions/collation/codepoint'"/>
      <option name="stable"
              as="xs:boolean"
              select="true()"/>
   </declare-step>
   <declare-step library="standard"
                 type="p:text-tail">
      <input port="source"
             primary="true"
             sequence="false"
             content-types="text"/>
      <output port="result"
              primary="true"
              sequence="false"
              content-types="text"/>
      <option name="count"
              required="true"
              as="xs:integer"/>
   </declare-step>
   <declare-step library="standard"
                 type="p:unarchive">
      <input port="source"
             primary="true"
             content-types="any"
             sequence="false"/>
      <output port="result"
              primary="true"
              content-types="any"
              sequence="true"/>
      <option name="include-filter"
              as="xs:string*"
              e:type="RegularExpression"
              xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"/>
      <option name="exclude-filter"
              as="xs:string*"
              e:type="RegularExpression"
              xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"/>
      <option name="format"
              as="xs:QName?"/>
      <option name="parameters"
              as="map(xs:QName, item()*)?"/>
      <option name="relative-to"
              as="xs:anyURI?"/>
      <option name="override-content-types"
              as="array(array(xs:string))?"/>
   </declare-step>
   <declare-step library="standard"
                 type="p:uncompress">
      <input port="source"
             primary="true"
             content-types="any"
             sequence="false"/>
      <output port="result"
              primary="true"
              content-types="any"
              sequence="false"/>
      <option name="format"
              as="xs:QName?"/>
      <option name="parameters"
              as="map(xs:QName,item()*)?"/>
      <option name="content-type"
              as="xs:string"
              select="'application/octet-stream'"/>
   </declare-step>
   <declare-step library="standard"
                 type="p:unwrap">
      <input port="source"
             content-types="xml html"/>
      <output port="result"
              content-types="text xml html"/>
      <option name="match"
              as="xs:string"
              select="'/*'"
              e:type="XSLTSelectionPattern"
              xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"/>
   </declare-step>
   <declare-step library="standard"
                 type="p:uuid">
      <input port="source"
             primary="true"
             content-types="xml html"/>
      <output port="result"
              content-types="text xml html"/>
      <option name="match"
              as="xs:string"
              select="'/*'"
              e:type="XSLTSelectionPattern"
              xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"/>
      <option name="version"
              as="xs:integer?"/>
      <option name="parameters"
              as="map(xs:QName, item()*)?"/>
   </declare-step>
   <declare-step library="standard"
                 type="p:wrap-sequence">
      <input port="source"
             content-types="text xml html"
             sequence="true"/>
      <output port="result"
              sequence="true"
              content-types="application/xml"/>
      <option name="wrapper"
              required="true"
              as="xs:QName"/>
      <option name="group-adjacent"
              as="xs:string?"
              e:type="XPathExpression"
              xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"/>
   </declare-step>
   <declare-step library="standard"
                 type="p:wrap">
      <input port="source"
             content-types="xml html"/>
      <output port="result"
              content-types="application/xml"/>
      <option name="wrapper"
              required="true"
              as="xs:QName"/>
      <option name="match"
              required="true"
              as="xs:string"
              e:type="XSLTSelectionPattern"
              xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"/>
      <option name="group-adjacent"
              as="xs:string?"
              e:type="XPathExpression"
              xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"/>
   </declare-step>
   <declare-step library="standard"
                 type="p:www-form-urldecode">
      <output port="result"
              content-types="application/json"/>
      <option name="value"
              required="true"
              as="xs:string"/>
   </declare-step>
   <declare-step library="standard"
                 type="p:www-form-urlencode">
      <output port="result"
              content-types="text/plain"/>
      <option name="parameters"
              required="true"
              as="map(xs:string,xs:anyAtomicType+)"/>
   </declare-step>
   <declare-step library="standard"
                 type="p:xinclude">
      <input port="source"
             content-types="xml html"/>
      <output port="result"
              content-types="xml html"/>
      <option name="fixup-xml-base"
              as="xs:boolean"
              select="false()"/>
      <option name="fixup-xml-lang"
              as="xs:boolean"
              select="false()"/>
   </declare-step>
   <declare-step library="standard"
                 type="p:xquery">
      <input port="source"
             content-types="any"
             sequence="true"
             primary="true"/>
      <input port="query"
             content-types="text xml"/>
      <output port="result"
              sequence="true"
              content-types="any"/>
      <option name="parameters"
              as="map(xs:QName,item()*)?"/>
      <option name="version"
              as="xs:string?"/>
   </declare-step>
   <declare-step library="standard"
                 type="p:xslt">
      <input port="source"
             content-types="any"
             sequence="true"
             primary="true"/>
      <input port="stylesheet"
             content-types="xml"/>
      <output port="result"
              primary="true"
              sequence="true"
              content-types="any"/>
      <output port="secondary"
              sequence="true"
              content-types="any"/>
      <option name="parameters"
              as="map(xs:QName,item()*)?"/>
      <option name="static-parameters"
              as="map(xs:QName,item()*)?"/>
      <option name="global-context-item"
              as="item()?"/>
      <option name="populate-default-collection"
              as="xs:boolean?"
              select="true()"/>
      <option name="initial-mode"
              as="xs:QName?"/>
      <option name="template-name"
              as="xs:QName?"/>
      <option name="output-base-uri"
              as="xs:anyURI?"/>
      <option name="version"
              as="xs:string?"/>
   </declare-step>
   <declare-step library="ixml"
                 type="p:invisible-xml">
      <input port="grammar"
             sequence="true"
             content-types="text xml"/>
      <input port="source"
             primary="true"
             content-types="any -xml -html"/>
      <output port="result"
              sequence="true"
              content-types="any"/>
      <option name="parameters"
              as="map(xs:QName, item()*)?"/>
      <option name="fail-on-error"
              as="xs:boolean"
              select="true()"/>
   </declare-step>
   <declare-step library="mail"
                 type="p:send-mail">
      <input port="source"
             sequence="true"
             content-types="any"/>
      <output port="result"
              content-types="application/xml"/>
      <option name="serialization"
              as="map(xs:QName,item()*)?"/>
      <option name="auth"
              as="map(xs:string, item()+)?"/>
      <option name="parameters"
              as="map(xs:QName, item()*)?"/>
   </declare-step>
   <declare-step library="os"
                 type="p:os-info">
      <output port="result"
              content-types="application/xml"
              primary="true"/>
   </declare-step>
   <declare-step library="os"
                 type="p:os-exec">
      <input port="source"
             sequence="true"
             content-types="any"/>
      <output port="result"
              primary="true"
              sequence="true"
              content-types="any"/>
      <output port="error"
              sequence="true"
              content-types="any"/>
      <output port="exit-status"
              content-types="application/xml"/>
      <option name="command"
              required="true"
              as="xs:string"/>
      <option name="args"
              select="()"
              as="xs:string*"/>
      <option name="cwd"
              as="xs:string?"/>
      <option name="result-content-type"
              select="'text/plain'"
              as="xs:string"/>
      <option name="error-content-type"
              select="'text/plain'"
              as="xs:string"/>
      <option name="path-separator"
              as="xs:string?"/>
      <option name="failure-threshold"
              as="xs:integer?"/>
      <option name="serialization"
              as="map(xs:QName,item()*)?"/>
   </declare-step>
   <declare-step library="paged-media"
                 type="p:css-formatter">
      <input port="source"
             content-types="xml html"/>
      <input port="stylesheet"
             content-types="text"
             sequence="true">
         <empty/>
      </input>
      <output port="result"
              content-types="any"/>
      <option name="parameters"
              as="map(xs:QName,item()*)?"/>
      <option name="content-type"
              as="xs:string?"/>
   </declare-step>
   <declare-step library="paged-media"
                 type="p:xsl-formatter">
      <input port="source"
             content-types="xml"/>
      <output port="result"
              content-types="any"/>
      <option name="parameters"
              as="map(xs:QName,item()*)?"/>
      <option name="content-type"
              as="xs:string?"/>
   </declare-step>
   <declare-step library="rdf"
                 type="p:something-rdf">
      <input port="source"
             primary="true"
             sequence="false"
             content-types="text"/>
      <output port="result"
              primary="true"
              sequence="false"
              content-types="html"/>
      <option name="parameters"
              as="map(xs:QName, item()*)?"/>
   </declare-step>
   <declare-step library="validation"
                 type="p:validate-with-nvdl">
      <input port="source"
             primary="true"
             content-types="xml html"/>
      <input port="nvdl"
             content-types="xml"/>
      <input port="schemas"
             sequence="true"
             content-types="text xml">
         <empty/>
      </input>
      <output port="result"
              primary="true"
              content-types="xml html"/>
      <output port="report"
              sequence="true"
              content-types="xml json"/>
      <option name="assert-valid"
              select="true()"
              as="xs:boolean"/>
      <option name="report-format"
              select="'xvrl'"
              as="xs:string"/>
      <option name="parameters"
              as="map(xs:QName,item()*)?"/>
   </declare-step>
   <declare-step library="validation"
                 type="p:validate-with-relax-ng">
      <input port="source"
             primary="true"
             content-types="xml html"/>
      <input port="schema"
             content-types="text xml"/>
      <output port="result"
              primary="true"
              content-types="xml html"/>
      <output port="report"
              sequence="true"
              content-types="xml json"/>
      <option name="dtd-attribute-values"
              select="false()"
              as="xs:boolean"/>
      <option name="dtd-id-idref-warnings"
              select="false()"
              as="xs:boolean"/>
      <option name="assert-valid"
              select="true()"
              as="xs:boolean"/>
      <option name="report-format"
              select="'xvrl'"
              as="xs:string"/>
      <option name="parameters"
              as="map(xs:QName,item()*)?"/>
   </declare-step>
   <declare-step library="validation"
                 type="p:validate-with-schematron">
      <input port="source"
             primary="true"
             content-types="xml html"/>
      <input port="schema"
             content-types="xml"/>
      <output port="result"
              primary="true"
              content-types="xml html"/>
      <output port="report"
              sequence="true"
              content-types="xml json"/>
      <option name="parameters"
              as="map(xs:QName,item()*)?"/>
      <option name="phase"
              select="'#DEFAULT'"
              as="xs:string"/>
      <option name="assert-valid"
              select="true()"
              as="xs:boolean"/>
      <option name="report-format"
              select="'svrl'"
              as="xs:string"/>
   </declare-step>
   <declare-step library="validation"
                 type="p:validate-with-xml-schema">
      <input port="source"
             primary="true"
             content-types="xml html"/>
      <input port="schema"
             sequence="true"
             content-types="xml"/>
      <output port="result"
              primary="true"
              content-types="xml html"/>
      <output port="report"
              sequence="true"
              content-types="xml json"/>
      <option name="use-location-hints"
              select="false()"
              as="xs:boolean"/>
      <option name="try-namespaces"
              select="false()"
              as="xs:boolean"/>
      <option name="assert-valid"
              select="true()"
              as="xs:boolean"/>
      <option name="parameters"
              as="map(xs:QName,item()*)?"/>
      <option name="mode"
              select="'strict'"
              values="('strict','lax')"/>
      <option name="version"
              as="xs:string?"/>
      <option name="report-format"
              select="'xvrl'"
              as="xs:string"/>
   </declare-step>
   <declare-step library="validation"
                 type="p:validate-with-json-schema">
      <input port="source"
             primary="true"
             content-types="json"/>
      <input port="schema"
             sequence="false"
             content-types="json"/>
      <output port="result"
              primary="true"
              content-types="json"/>
      <output port="report"
              sequence="true"
              content-types="xml json"/>
      <option name="assert-valid"
              select="true()"
              as="xs:boolean"/>
      <option name="default-version"
              as="xs:string?"/>
      <option name="parameters"
              as="map(xs:QName,item()*)?"/>
      <option name="report-format"
              select="'xvrl'"
              as="xs:string"/>
   </declare-step>
   <declare-step library="validation"
                 type="p:validate-with-dtd">
      <input port="source"
             primary="true"
             content-types="xml html"/>
      <output port="result"
              primary="true"
              content-types="xml html"/>
      <output port="report"
              sequence="true"
              content-types="xml json"/>
      <option name="report-format"
              select="'xvrl'"
              as="xs:string"/>
      <option name="serialization"
              as="map(xs:QName,item()*)?"/>
      <option name="assert-valid"
              select="true()"
              as="xs:boolean"/>
   </declare-step>
</library>